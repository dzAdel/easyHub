<Project>
  <Name>easyLib.ADT</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Trees.Tree</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Trees</Name>
        <Access>Public</Access>
        <Location left="654" top="202" />
        <Size width="498" height="213" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static IEnumerable&lt;ITreeNode&lt;T&gt;&gt; Enumerate&lt;T, N&gt;(ITree&lt;T, N&gt; tree, TraversalOrder order)</Member>
        <Member type="Method">public static int GetExternalPathLength&lt;T, N&gt;(ITree&lt;T, N&gt; tree)</Member>
        <Member type="Method">public static void GetInternalPathLength&lt;T, N&gt;(ITree&lt;T, N&gt; tree)</Member>
        <Member type="Method">public static int GetWeightedExternalPathLength&lt;T, N&gt;(ITree&lt;T, N&gt; tree, Func&lt;N, int&gt; leafWeight)</Member>
        <Member type="Method">public static IEnumerable&lt;ValueTuple&gt; LevelOrderTraversal&lt;T, N&gt;(ITree&lt;T, N&gt; tree)</Member>
        <Member type="Method">public static int GetHeight&lt;T, N&gt;(ITree&lt;T, N&gt; tree)</Member>
        <Member type="Method">public static bool Contains&lt;T, N&gt;(ITree&lt;T, N&gt; tree, ITreeNode&lt;T&gt; node)</Member>
        <Member type="Method">public static int GetDepth&lt;T, N&gt;(ITree&lt;T,N&gt; tree, ITreeNode&lt;T&gt; node)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>ValueTupe =&gt; (ITreeNode&lt;T&gt; node, int level)</Text>
        <Location left="324" top="202" />
        <Size width="248" height="50" />
      </Entity>
      <Entity type="Enum">
        <Name>TraversalOrder</Name>
        <Access>Public</Access>
        <Location left="497" top="29" />
        <Size width="163" height="129" />
        <Collapsed>False</Collapsed>
        <Value>PreOrder</Value>
        <Value>InOrder</Value>
        <Value>PostOrder</Value>
        <Value>BreadthFirst</Value>
      </Entity>
      <Entity type="Interface">
        <Name>Itree&lt;T, N&gt;</Name>
        <Access>Public</Access>
        <Location left="324" top="445" />
        <Size width="300" height="180" />
        <Collapsed>False</Collapsed>
        <Member type="Property">N Root { get; }</Member>
        <Member type="Property">IEnumerable&lt;N&gt; Nodes { get; }</Member>
        <Member type="Property">IEnumerable&lt;N&gt; Leaves { get; }</Member>
        <Member type="Property">bool IsEmpty { get; }</Member>
        <Member type="Method">IEnumerable&lt;N&gt; Enumerate(TraversalOrder order)</Member>
        <Member type="Method">int GetCount()</Member>
      </Entity>
      <Entity type="Interface">
        <Name>IEnumerable&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="379" top="277" />
        <Size width="163" height="61" />
        <Collapsed>True</Collapsed>
      </Entity>
      <Entity type="Comment">
        <Text>where N: ItreeNode&lt;T&gt;</Text>
        <Location left="83" top="360" />
        <Size width="150" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>Extension class</Text>
        <Location left="796" top="65" />
        <Size width="101" height="50" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Comment" first="1" second="0">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>597</X>
          <Y>227</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>629</X>
          <Y>347</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="3" second="4">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>460</X>
          <Y>420</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>460</X>
          <Y>347</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="5" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>258</X>
          <Y>397</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>299</X>
          <Y>465</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="6" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>846</X>
          <Y>140</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>846</X>
          <Y>177</Y>
        </BendPoint>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Trees.BasicTree</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Node</Name>
        <Access>Public</Access>
        <Location left="79" top="180" />
        <Size width="357" height="434" />
        <Collapsed>False</Collapsed>
        <Member type="Field">readonly List&lt;Node&gt; m_children</Member>
        <Member type="Field">Node m_parent</Member>
        <Member type="Constructor">public Node(T item)</Member>
        <Member type="Constructor">public Node(T Item, IEnumerable&lt;T&gt; children)</Member>
        <Member type="Property">public T Item { get; set; }</Member>
        <Member type="Property">public bool IsLeaf { get; }</Member>
        <Member type="Property">public int Degree { get; }</Member>
        <Member type="Property">Node Parent { get; }</Member>
        <Member type="Property">public IEnumerable&lt;Node&gt; Children { get; }</Member>
        <Member type="Method">public IEnumerable&lt;Node&gt; GetPath(Node ancestor = null)</Member>
        <Member type="Method">public void PrependChild(Node node)</Member>
        <Member type="Method">public Node PrependChild(T item)</Member>
        <Member type="Method">public void AppendChild(Node node)</Member>
        <Member type="Method">public Node AppendChild(T item)</Member>
        <Member type="Method">public void InsertSibling(Node node)</Member>
        <Member type="Method">public Node InsertSibling(T item)</Member>
        <Member type="Method">public void DetachNode(Node node)</Member>
        <Member type="Property">ITreeNode&lt;T&gt; ITreeNode&lt;T&gt;.Parent { get; }</Member>
        <Member type="Property">IEnumerable&lt;ITreeNode&lt;T&gt;&gt; ITreeNode&lt;T&gt;.Children { get; }</Member>
        <Member type="Property">boll ClassInvariant { get; }</Member>
        <Modifier>Sealed</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>ITreeNode&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="178" top="43" />
        <Size width="163" height="61" />
        <Collapsed>True</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>BasicTree&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="684" top="234" />
        <Size width="346" height="349" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public BasicTree(Node root = null)</Member>
        <Member type="Constructor">public BasicTree(T item, IEnumerable&lt;T&gt; children = null)</Member>
        <Member type="Property">public Node Root { get; set; }</Member>
        <Member type="Property">public IEnumerable&lt;Node&gt; Nodes { get; }</Member>
        <Member type="Property">public IEnumerable&lt;Node&gt; Leaves { get; }</Member>
        <Member type="Property">public bool IsEmpty { get; }</Member>
        <Member type="Method">public int GetCount()</Member>
        <Member type="Method">public IEnumerable&lt;Node&gt; Enumerate(TraversalOrder order)</Member>
        <Member type="Method">public IEnumerator&lt;T&gt; GetEnumerator()</Member>
        <Member type="Method">public IEnumerable&lt;Node&gt; GetPath(Node node)</Member>
        <Member type="Method">public void Clear()</Member>
        <Member type="Method">public IEnumerable&lt;BasicTree&lt;T&gt;&gt; SubTrees()</Member>
        <Member type="Method">public static BasicTree&lt;T&gt; Merge(T item, params BasicTree&lt;T&gt;[] trees)</Member>
        <Member type="Method">IEnumerator Enumerable.GetEnumerator()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>ITree&lt;T, N&gt;</Name>
        <Access>Public</Access>
        <Location left="764" top="72" />
        <Size width="163" height="61" />
        <Collapsed>True</Collapsed>
      </Entity>
      <Entity type="Comment">
        <Text>where N = BasicTree&lt;T&gt;.Node</Text>
        <Location left="1055" top="116" />
        <Size width="183" height="50" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Realization" first="0" second="1">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>259</X>
          <Y>155</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>259</X>
          <Y>113</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="2" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>845</X>
          <Y>209</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>845</X>
          <Y>142</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Nesting" first="2" second="0">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>659</X>
          <Y>408</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>461</X>
          <Y>408</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="4" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1030</X>
          <Y>141</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>952</X>
          <Y>94</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="4" second="2">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1130</X>
          <Y>191</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1068</X>
          <Y>259</Y>
        </BendPoint>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Trees.BinaryTree</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Interface">
        <Name>IBinaryTreeNode&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="100" top="133" />
        <Size width="242" height="95" />
        <Collapsed>False</Collapsed>
        <Member type="Property">IBinaryTreeNode&lt;T&gt; LeftChild { get; }</Member>
        <Member type="Property">IBinaryTreeNode&lt;T&gt; RightChild { get; }</Member>
      </Entity>
      <Entity type="Interface">
        <Name>ITreeNode&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="130" top="36" />
        <Size width="162" height="216" />
        <Collapsed>True</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>Node&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="386" top="312" />
        <Size width="357" height="371" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private Node m_leftChild</Member>
        <Member type="Field">private Node m_rightChild</Member>
        <Member type="Constructor">public Node(T item = default, Node leftChild = null, Node rightChild = null)</Member>
        <Member type="Property">public int Item { get; set; }</Member>
        <Member type="Property">public Node Parent { get; private set; }</Member>
        <Member type="Property">public Node LeftChild { get; set; }</Member>
        <Member type="Property">public Node RightChild { get; set; }</Member>
        <Member type="Property">public IEnumerable&lt;Node&gt; Children { get; }</Member>
        <Member type="Property">public bool IsLeaf { get; }</Member>
        <Member type="Property">public int Degree { get; }</Member>
        <Member type="Method">public IEnumerable&lt;Node&gt; GetPath()</Member>
        <Member type="Property">IBinaryTreeNode&lt;T&gt; IBinaryTreeNode&lt;T&gt;.LeftChild { get; }</Member>
        <Member type="Property">IBinaryTreeNode&lt;T&gt; IBinaryTreeNode&lt;T&gt;.RightChild { get; }</Member>
        <Member type="Property">ITreeNode&lt;T&gt; ITreeNode&lt;T&gt;.Parent { get; }</Member>
        <Member type="Property">IEnumerable&lt;ITreeNode&lt;T&gt;&gt; ITreeNode&lt;T&gt;.Children { get; }</Member>
        <Member type="Property">bool ClassInvariant { get; }</Member>
        <Modifier>Sealed</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IBinaryTree&lt;T, N&gt;</Name>
        <Access>Public</Access>
        <Location left="1100" top="231" />
        <Size width="163" height="95" />
        <Collapsed>False</Collapsed>
        <Member type="Method">bool IsProper()</Member>
        <Member type="Method">bool IsComplete()</Member>
      </Entity>
      <Entity type="Interface">
        <Name>ITree&lt;T, N&gt;</Name>
        <Access>Public</Access>
        <Location left="1100" top="61" />
        <Size width="162" height="216" />
        <Collapsed>True</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>BinaryTree&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="882" top="439" />
        <Size width="665" height="373" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public BinaryTree(Node root = null)</Member>
        <Member type="Constructor">public BinaryTree(T item)</Member>
        <Member type="Property">public Node Root { get; set; }</Member>
        <Member type="Property">public bool IsEmpty { get; }</Member>
        <Member type="Property">public IEnumerable&lt;Node&gt; Nodes { get; }</Member>
        <Member type="Property">public IEnumerable&lt;Node&gt; Leaves { get; }</Member>
        <Member type="Method">public int GetCount()</Member>
        <Member type="Method">public bool IsProper()</Member>
        <Member type="Method">public bool IsComplete()</Member>
        <Member type="Method">public IEnumerable&lt;Node&gt; GetPath(Node node)</Member>
        <Member type="Method">public IEnumerable&lt;Node&gt; Enumerate(TraversalOrder order)</Member>
        <Member type="Method">public IEnumerator&lt;T&gt; GetEnumerator()</Member>
        <Member type="Method">public void Clear()</Member>
        <Member type="Method">public IEnumerable&lt;BinaryTree&lt;T&gt;&gt; SubTrees()</Member>
        <Member type="Method">public static BinaryTree&lt;T&gt; Merge(T item, BinaryTree&lt;T&gt; lfetTree, BinaryTree&lt;T&gt; rightTree)</Member>
        <Member type="Method">public static BinaryTree&lt;T&gt; BuildTree(IList&lt;T&gt; inOrderTraversal, IList&lt;T&gt; otherTraversal, TraversalOrder otherTraversalOrder)</Member>
        <Member type="Method">public static BinaryTree&lt;T&gt; BuildTree&lt;U&gt;(IList&lt;U&gt; inOrderTraversal, Func&lt;U, T&gt; selector, TraversalOrder otherTraversalOrder)</Member>
        <Modifier>Sealed</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>with:
N = BinaryTree&lt;T&gt;.Node&gt;</Text>
        <Location left="1387" top="248" />
        <Size width="160" height="55" />
      </Entity>
      <Entity type="Class">
        <Name>BinaryTrees</Name>
        <Access>Public</Access>
        <Location left="666" top="50" />
        <Size width="288" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static bool IsProper&lt;T, N&gt;(IBinaryTree&lt;T, N&gt; tree)</Member>
        <Member type="Method">public static bool IsComplete&lt;T, N&gt;(IBinaryTree&lt;T, N&gt; tree)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>Extension class</Text>
        <Location left="432" top="53" />
        <Size width="103" height="50" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="0" second="1">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="3" second="4">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1181</X>
          <Y>206</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1181</X>
          <Y>131</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="5" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1181</X>
          <Y>414</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1181</X>
          <Y>351</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="6" second="5">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1473</X>
          <Y>328</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1294</X>
          <Y>414</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Nesting" first="5" second="2">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="2" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="6" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1362</X>
          <Y>275</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1288</X>
          <Y>256</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="8" second="7">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>560</X>
          <Y>78</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>641</X>
          <Y>78</Y>
        </BendPoint>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Heaps.Heap</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Interface">
        <Name>IHeap&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="524" top="16" />
        <Size width="163" height="129" />
        <Collapsed>False</Collapsed>
        <Member type="Property">int Count { get; }</Member>
        <Member type="Property">bool IsEmpty { get; }</Member>
        <Member type="Method">T Pop()</Member>
        <Member type="Method">T Peek()</Member>
      </Entity>
      <Entity type="Class">
        <Name>LinkedHeap&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="360" top="627" />
        <Size width="285" height="264" />
        <Collapsed>False</Collapsed>
        <Member type="Field">readonly BinaryTree&lt;T&gt; m_tree</Member>
        <Member type="Field">int m_count</Member>
        <Member type="Constructor">public LinkedHeap(Func&lt;T, T, bool&gt; before = null)</Member>
        <Member type="Constructor">public LinkedHeap(Comparison&lt;T&gt; comparison)</Member>
        <Member type="Property">protected override Func&lt;T, T, bool&gt; Befor { get; }</Member>
        <Member type="Method">protected override T PopItem()</Member>
        <Member type="Method">protected override T PeekItem()</Member>
        <Member type="Method">protected override void AddItem(item T)</Member>
        <Member type="Method">protected override int GetItemCount()</Member>
        <Member type="Method">protected abstract IEnumerable&lt;ValueTuple&gt; LevelOrderTraversal()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>=&gt; m_tree.Root.Item</Text>
        <Location left="10" top="708" />
        <Size width="133" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>=&gt; m_count</Text>
        <Location left="86" top="797" />
        <Size width="84" height="50" />
      </Entity>
      <Entity type="Class">
        <Name>FlatHeap&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="822" top="644" />
        <Size width="311" height="264" />
        <Collapsed>False</Collapsed>
        <Member type="Field">readonly List&lt;T&gt; m_items</Member>
        <Member type="Constructor">public FlatHeap(Func&lt;T, T, bool&gt; before)</Member>
        <Member type="Constructor">public FlatHeap(Comparison&lt;T&gt; comparison)</Member>
        <Member type="Constructor">public FlatHeap(int intCapacity, Func&lt;T, T, bool&gt; before = null)</Member>
        <Member type="Constructor">public FlatHeap(int intCapacity, Comparison&lt;T&gt; comparison)</Member>
        <Member type="Property">protected override Func&lt;T, T, bool&gt; Befor { get; }</Member>
        <Member type="Method">protected override T PopItem()</Member>
        <Member type="Method">protected override T PeekItem()</Member>
        <Member type="Method">protected override void AddItem(item T)</Member>
        <Member type="Method">protected override int GetItemCount()</Member>
        <Member type="Method">protected abstract IEnumerable&lt;ValueTuple&gt; LevelOrderTraversal()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Heap&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="462" top="209" />
        <Size width="285" height="315" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int Count { get; }</Member>
        <Member type="Property">public bool IsEmpty { get; }</Member>
        <Member type="Method">public abstract T Pop()</Member>
        <Member type="Method">public abstract T Peek()</Member>
        <Member type="Method">public abstract void Add(T iterm)</Member>
        <Member type="Method">public void Remove(T item)</Member>
        <Member type="Method">public bool Contains(T item)</Member>
        <Member type="Property">protected abstract Func&lt;T, T, bool&gt; Befor { get; }</Member>
        <Member type="Method">protected abstract T PopItem()</Member>
        <Member type="Method">protected abstract T PeekItem()</Member>
        <Member type="Method">protected abstract void AddItem(item T)</Member>
        <Member type="Method">public abstract void RemoveItem(T item)</Member>
        <Member type="Method">protected abstract int GetItemCount()</Member>
        <Member type="Method">protected abstract IEnumerable&lt;ValueTuple&gt; LevelOrderTraversal()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>=&gt; m_item.Count</Text>
        <Location left="674" top="806" />
        <Size width="118" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>ValueTupe = (T Value, int Level)</Text>
        <Location left="173" top="393" />
        <Size width="181" height="50" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Dependency" first="5" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>605</X>
          <Y>184</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>605</X>
          <Y>170</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="3" second="1">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>335</X>
          <Y>839</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="2" second="1">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>334</X>
          <Y>805</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="6" second="4">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>795</X>
          <Y>873</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="7" second="5">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>437</X>
          <Y>477</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="1" second="5">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="4" second="5">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Trees.TreeNode</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Interface">
        <Name>TreeNode&lt;T&gt;</Name>
        <Access>Public</Access>
        <Location left="157" top="34" />
        <Size width="194" height="163" />
        <Collapsed>False</Collapsed>
        <Member type="Property">T Item { get; }</Member>
        <Member type="Property">bool IsLeaf { get; }</Member>
        <Member type="Property">ITreeNode&lt;T&gt; Parent { get; }</Member>
        <Member type="Property">IEnumerable&lt;ITreeNode&lt;T&gt;&gt; Children { get; }</Member>
        <Member type="Property">int Degree { get; }</Member>
      </Entity>
      <Entity type="Class">
        <Name>TreeNodes</Name>
        <Access>Public</Access>
        <Location left="678" top="127" />
        <Size width="503" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static bool IsDescendantOf&lt;T&gt;(ITreeNode&lt;T&gt; node, ITreeNode&lt;T&gt; ancestor)</Member>
        <Member type="Method">public static bool IsAncestorOf&lt;T&gt;(ITreeNode&lt;T&gt; node, ITreeNode&lt;T&gt; descendant)</Member>
        <Member type="Method">public static int GetDescendantCount&lt;T&gt;(ITreeNode&lt;T&gt; node)</Member>
        <Member type="Method">public static IEnumerable&lt;ITreeNode&lt;T&gt;&gt; GetPath&lt;T&gt;(ITreeNode&lt;T&gt; node, ITreeNode&lt;T&gt; ancestor = null)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>Extension class</Text>
        <Location left="457" top="61" />
        <Size width="98" height="50" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Comment" first="2" second="1">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>580</X>
          <Y>86</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>653</X>
          <Y>157</Y>
        </BendPoint>
      </Relationship>
    </Relationships>
  </ProjectItem>
</Project>